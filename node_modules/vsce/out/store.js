"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var osenv_1 = require("osenv");
var util_1 = require("./util");
var validation_1 = require("./validation");
var denodeify = require("denodeify");
var readFile = denodeify(fs.readFile);
var writeFile = denodeify(fs.writeFile);
var storePath = path.join(osenv_1.home(), '.vsce');
function load() {
    return readFile(storePath, 'utf8')
        .catch(function (err) { return err.code !== 'ENOENT' ? Promise.reject(err) : Promise.resolve('{}'); })
        .then(function (rawStore) {
        try {
            return Promise.resolve(JSON.parse(rawStore));
        }
        catch (e) {
            return Promise.reject("Error parsing store: " + storePath);
        }
    })
        .then(function (store) {
        store.publishers = store.publishers || [];
        return Promise.resolve(store);
    });
}
function save(store) {
    return writeFile(storePath, JSON.stringify(store))
        .then(function () { return store; });
}
function addPublisherToStore(store, publisher) {
    store.publishers = store.publishers.filter(function (p) { return p.name !== publisher.name; }).concat([publisher]);
    return save(store).then(function () { return publisher; });
}
function removePublisherFromStore(store, publisherName) {
    store.publishers = store.publishers.filter(function (p) { return p.name !== publisherName; });
    return save(store);
}
function requestPAT(store, publisherName) {
    return util_1.read("Personal Access Token for publisher '" + publisherName + "':", { silent: true, replace: '*' })
        .then(function (pat) {
        var api = util_1.getGalleryAPI(pat);
        return api.getPublisher(publisherName).then(function (p) {
            if (!p) {
                return Promise.reject("Publisher '" + publisherName + "' not found. Please create one with 'vsce create-publisher'.");
            }
            if (p.publisherName !== publisherName) {
                return Promise.reject("Wrong publisher name '" + publisherName + "'. Found '" + p.publisherName + "' instead.");
            }
            console.log("Authentication successful. Found publisher '" + p.displayName + "'.");
            return pat;
        });
    })
        .then(function (pat) { return addPublisherToStore(store, { name: publisherName, pat: pat }); });
}
function getPublisher(publisherName) {
    validation_1.validatePublisher(publisherName);
    return load().then(function (store) {
        var publisher = store.publishers.filter(function (p) { return p.name === publisherName; })[0];
        return publisher ? Promise.resolve(publisher) : requestPAT(store, publisherName);
    });
}
exports.getPublisher = getPublisher;
function loginPublisher(publisherName) {
    validation_1.validatePublisher(publisherName);
    return load()
        .then(function (store) {
        var publisher = store.publishers.filter(function (p) { return p.name === publisherName; })[0];
        if (publisher) {
            console.log("Publisher '" + publisherName + "' is already known");
            return util_1.read('Do you want to overwrite its PAT? [y/N] ')
                .then(function (answer) { return /^y$/i.test(answer) ? store : Promise.reject('Aborted'); });
        }
        return Promise.resolve(store);
    })
        .then(function (store) { return requestPAT(store, publisherName); });
}
exports.loginPublisher = loginPublisher;
function logoutPublisher(publisherName) {
    validation_1.validatePublisher(publisherName);
    return load().then(function (store) {
        var publisher = store.publishers.filter(function (p) { return p.name === publisherName; })[0];
        if (!publisher) {
            return Promise.reject("Unknown publisher '" + publisherName + "'");
        }
        return removePublisherFromStore(store, publisherName);
    });
}
exports.logoutPublisher = logoutPublisher;
function createPublisher(publisherName) {
    validation_1.validatePublisher(publisherName);
    return util_1.read("Publisher human-friendly name: ", { default: publisherName }).then(function (displayName) {
        return util_1.read("E-mail: ").then(function (email) {
            return util_1.read("Personal Access Token:", { silent: true, replace: '*' })
                .then(function (pat) {
                var api = util_1.getGalleryAPI(pat);
                var raw = {
                    publisherName: publisherName,
                    displayName: displayName,
                    extensions: [],
                    flags: null,
                    lastUpdated: null,
                    longDescription: '',
                    publisherId: null,
                    shortDescription: '',
                    emailAddress: [email]
                };
                return api.createPublisher(raw)
                    .then(function () { return ({ name: publisherName, pat: pat }); });
            })
                .then(function (publisher) { return load().then(function (store) { return addPublisherToStore(store, publisher); }); });
        });
    })
        .then(function () { return console.log("Successfully created publisher '" + publisherName + "'."); });
}
exports.createPublisher = createPublisher;
function deletePublisher(publisherName) {
    return getPublisher(publisherName).then(function (_a) {
        var pat = _a.pat;
        return util_1.read("This will FOREVER delete '" + publisherName + "'! Are you sure? [y/N] ")
            .then(function (answer) { return /^y$/i.test(answer) ? null : Promise.reject('Aborted'); })
            .then(function () { return util_1.getGalleryAPI(pat); })
            .then(function (api) { return api.deletePublisher(publisherName); })
            .then(function () { return load().then(function (store) { return removePublisherFromStore(store, publisherName); }); })
            .then(function () { return console.log("Successfully deleted publisher '" + publisherName + "'."); });
    });
}
exports.deletePublisher = deletePublisher;
function listPublishers() {
    return load()
        .then(function (store) { return store.publishers; })
        .then(function (publishers) { return publishers.forEach(function (p) { return console.log(p.name); }); });
}
exports.listPublishers = listPublishers;

//# sourceMappingURL=store.js.map
